// https://github.com/Azure/azure-quickstart-templates/tree/master/quickstarts/microsoft.storage/blob-storage-private-endpoint
// Need to convert to linked template
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
     "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Specifies the location for all the resources."
        }
      },
      "virtualNetworkName": {
        "defaultValue": "atVnet",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the virtual network hosting the virtual machine."
        }
      },
      "virtualNetworkAddressPrefix": {
        "defaultValue": "10.100.0.0/16",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the virtual network hosting the virtual machine."
        }
      },
      "subnetName": {
        "defaultValue": "VmSubnet",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the subnet hosting the virtual machine."
        }
      },
      "subnetAddressPrefix": {
        "defaultValue": "10.100.0.0/24",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the subnet hosting the virtual machine."
        }
      },
      "vmsssubnetName": {
        "defaultValue": "VmssSubnet",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the subnet hosting the virtual machine Scale Set."
        }
      },
      "vmsssubnetAddressPrefix": {
        "defaultValue": "10.100.1.0/24",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the subnet hosting the virtual machine Scale Set."
        }
      },
      // Application Gateway
      "appGatewayname": {
        "defaultValue": "AppGateway",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the Application Gateway."
        }
      },
      "subnetAGWName": {
        "defaultValue": "GatewaySubnet",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the subnet for Application Gateway."
        }
      },
      "subnetAGWAddressPrefix": {
        "defaultValue": "10.100.2.0/24",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the subnet for Application Gateway."
        }
      },

      "vmName": {
        "type": "string",
        "defaultValue": "webVm",
        "metadata": {
          "description": "Specifies the name of the virtual machine."
        }
      },
      "vmSize": {
        "type": "string",
        "defaultValue": "Standard_DS2_v2",
        "metadata": {
          "description": "Specifies the size of the virtual machine."
        }
      },
      "imagePublisher": {
        "type": "string",
        "defaultValue": "Canonical",
        "metadata": {
          "description": "Specifies the image publisher of the disk image used to create the virtual machine."
        }
      },
      "imageOffer": {
        "type": "string",
        "defaultValue": "UbuntuServer",
        "metadata": {
          "description": "Specifies the offer of the platform image or marketplace image used to create the virtual machine."
        }
      },
      "imageSku": {
        "type": "string",
        "defaultValue": "18.04-LTS",
        "metadata": {
          "description": "Specifies the Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
        }
      },
      "authenticationType": {
        "type": "string",
        "defaultValue": "password",
        "allowedValues": [
          "sshPublicKey",
          "password"
        ],
        "metadata": {
          "description": "Specifies the type of authentication when accessing the Virtual Machine. SSH key is recommended."
        }
      },
      "adminUsername": {
        "type": "string",
        "defaultValue": "azadmin",
        "metadata": {
          "description": "Specifies the name of the administrator account of the virtual machine."
        }
      },
      "adminPasswordOrKey": {
        "type": "securestring",
        "metadata": {
          "description": "Specifies the SSH Key or password for the virtual machine. SSH key is recommended."
        }
      },
      "diskStorageAccounType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_RAGRS",
          "Standard_ZRS",
          "Premium_LRS",
          "Premium_ZRS",
          "Standard_GZRS",
          "Standard_RAGZRS"
        ],
        "metadata": {
          "description": "Specifies the storage account type for OS and data disk."
        }
      },
      "numDataDisks": {
        "type": "int",
        "defaultValue": 0,
        "minValue": 0,
        "maxValue": 64,
        "metadata": {
          "description": "Specifies the number of data disks of the virtual machine."
        }
      },
      "osDiskSize": {
        "type": "int",
        "defaultValue": 30,
        "metadata": {
          "description": "Specifies the size in GB of the OS disk of the VM."
        }
      },
      "dataDiskSize": {
        "type": "int",
        "defaultValue": 30,
        "metadata": {
          "description": "Specifies the size in GB of the OS disk of the virtual machine."
        }
      },
      "dataDiskCaching": {
        "type": "string",
        "defaultValue": "ReadWrite",
        "metadata": {
          "description": "Specifies the caching requirements for the data disks."
        }
      },
      // Linked Template Parameters
      "_artifactsLocation": {
        "type": "string",
        "metadata": {
          "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
        }
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
          "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
        },
      "defaultValue": ""
      },

      "pathMatchlk1": {
          "defaultValue": "/images/*",
          "type": "string",
          "metadata": {
            "description": "Path match 1 for images"
          }
      },
      "pathMatchlk2": {
          "defaultValue": "/others/*",
          "type": "string",
          "metadata": {
            "description": "Path match 1 for images"
          }
      }
      
      // Virtual Machine Scale Set
      /*
      "templateUri-vmss": {
        "type": "string",
        "metadata": {
          "description": "Linked Template Uri for Virtual Machine Scale Set"
        }
      },
      "templateSas-vmss": {
        "type": "string",
        "metadata": {
          "description": "Linked Template SAS for Virtual Machine Scale Set"
        }
      },
      "parameterUri-vmss": {
        "type": "string",
        "metadata": {
          "description": "Linked Template parameter Uri for Virtual Machine Scale Set"
        }
      },
      "parameterSas-vmss": {
        "type": "string",
        "metadata": {
          "description": "Linked Template parameter SAS for Virtual Machine Scale Set"
        }
      }
      */
      // END Linked Template Parameters

      // Blob Storage
      /*      
      "blobStorageAccountName": {
      "type": "string",
      "metadata": {
          "description": "Specifies the storage ID for the logAnalytics."
          }
      }

      "blobStorageAccountName": {
      "type": "string",
      "defaultValue": "[concat('storage', uniquestring(resourceGroup().id))]",
      "metadata": {
          "description": "Specifies the globally unique name for the storage account used to store the images of the virtual machine."
          }
      },
      "blobStorageAccountPrivateEndpointName": {
      "type": "string",
      "defaultValue": "BlobPrivateEndpoint",
      "metadata": {
          "description": "Specifies the name of the private link to the boot diagnostics storage account."
          }
      }
      */
    // Parameter End
    },
    "variables": {
      "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
      "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
      "vmsssubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('vmsssubnetName'))]",
      "vmssnsgName": "[concat(parameters('vmsssubnetName'), '-nsg')]",
      "vmssnsgId": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('vmssnsgName'))]",

      "nsgName": "[concat(parameters('subnetName'), '-nsg')]",
      "nsgId": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
      "publicIPAddressName": "[concat(parameters('vmName'), '-publicIP')]",
      "nicName": "[concat(parameters('vmName'), '-nic')]",
      "ipconfig_name": "ipconfig",
      //"vmId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
      //    "customScriptId": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'CustomScript')]",
      //"omsAgentForLinuxId": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'LogAnalytics')]",
      //    "scriptFileUri": "[uri(parameters('_artifactsLocation'), concat('scripts/', parameters('scriptFileName'), parameters('_artifactsLocationSasToken')))]",
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
              "keyData": "[parameters('adminPasswordOrKey')]"
            }
          ]
        },
        "provisionVMAgent": true
      }
      //"blobStorageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('blobStorageAccountName'))]"
      /*
      // Storage Account Blob
      "blobStorageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('blobStorageAccountName'))]",
      "blobPublicDNSZoneForwarder": "[concat('.blob.', environment().suffixes.storage)]",
      "blobPrivateDnsZoneName": "[concat('privatelink', variables('blobPublicDNSZoneForwarder'))]",
      "blobPrivateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('blobPrivateDnsZoneName'))]",
      //      "blobServicePrimaryEndpoint": "[concat(parameters('blobStorageAccountName'), variables('blobPublicDNSZoneForwarder'))]",
      "blobStorageAccountPrivateEndpointId": "[resourceId('Microsoft.Network/privateEndpoints', parameters('blobStorageAccountPrivateEndpointName'))]",
      "blobStorageAccountPrivateEndpointGroupName": "blob",  // "table" or "queue" or "File Share"
      "GrpBlobPrivateDnsZone": "[concat(parameters('blobStorageAccountPrivateEndpointName'),'/', variables('blobStorageAccountPrivateEndpointGroupName'), 'PrivateDnsZoneGroup')]"
      */

    },
    "resources": [
      //****************************************************************************************
      // Virtul Networks and Subnets
      {
        "apiVersion": "2019-11-01",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[parameters('virtualNetworkName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[variables('nsgId')]"

        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[parameters('virtualNetworkAddressPrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[parameters('subnetName')]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefix')]",
                "networkSecurityGroup": {
                  "id": "[variables('nsgId')]"
                },
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              }
            }, 
            {
              "name": "[parameters('vmsssubnetName')]",
              "properties": {
                "addressPrefix": "[parameters('vmsssubnetAddressPrefix')]",
                "networkSecurityGroup": {
                  "id": "[variables('vmssnsgId')]"
                },
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              }
            }, 
            // AppGateway 
            {  // use it
              "name": "[parameters('subnetAGWName')]",
              "properties": {
                "addressPrefix": "[parameters('subnetAGWAddressPrefix')]",
                /*
                "networkSecurityGroup": {
                  "id": "[variables('nsgAGWId')]"  // may need to add appGw NSG
                },
                */                
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"

              }
            }
            // AppGateway end 
          ],
          "enableDdosProtection": false, // AppGateway 
          "enableVmProtection": false // AppGateway end         

        }
      },

      {
        "copy": {
          "name": "publicIPAddress",
          "count": "[length(range(1, 3))]"
        },
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2021-08-01",
        "name": "[format('{0}{1}', variables('publicIPAddressName'), range(1, 3)[copyIndex()])]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Static",
          "idleTimeoutInMinutes": 4
        }
      },
      // Network Security Groups 
      {
        "apiVersion": "2019-08-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('nsgName')]",
        "location": "[parameters('location')]",
        "properties": {
          "securityRules": [
            {
              "name": "AllowSSHInbound",
              "properties": {
                "priority": 100,
                "access": "Allow",
                "direction": "Inbound",
                "destinationPortRange": "22",
                "protocol": "Tcp",
                "sourceAddressPrefix": "*",
                "sourcePortRange": "*",
                "destinationAddressPrefix": "*"
              }
            }
          ]
        }
      },
      // Network Security Groups VMSS
      {
        "apiVersion": "2019-08-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('vmssnsgName')]",
        "location": "[parameters('location')]",
        "properties": {
          "securityRules": [
            {
              "name": "AllowAnyRDPInbound",
              "properties": {
                "priority": 110,
                "access": "Allow",
                "direction": "Inbound",
                "destinationPortRange": "3389",
                "protocol": "Tcp",
                "sourceAddressPrefix": "*",
                "sourcePortRange": "*",
                "destinationAddressPrefix": "*"
              }
            }
          ]
        }
      },
      // VM network Interfaces
      {
        "copy": {
          "name": "myNic",
          "count": "[length(range(0, 2))]"
        },
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/networkInterfaces",
        //"name": "[variables('nicName')]",
        "name": "[format('{0}{1}', variables('nicName'), add(range(0, 2)[copyIndex()], 1))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          //"[resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', variables('publicIPAddressName'), add(range(0, 2)[copyIndex()], 1)))]" ,               
          "[variables('vnetId')]",
          "[variables('nsgId')]",
          "publicIPAddress",
          "LinkedTemplate-appGw"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "[format('{0}{1}', variables('ipconfig_name'), add(range(0, 2)[copyIndex()], 1))]",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  //"id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', variables('publicIPAddressName'), add(range(0, 2)[copyIndex()], 1)))]"                
                  //"id": "[variables('publicIpId')]"
                },
                "subnet": {
                  "id": "[variables('subnetId')]"
                }
              }
            }
          ]
        }
      },


      // Virtual Machines
      {
        "copy": {
          "name": "VMbk",
          "count": "[length(range(0, 2))]"
        },        
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/virtualMachines",
        //"name": "[parameters('vmName')]",
        "name": "[format('{0}{1}', parameters('vmName'), add(range(0, 2)[copyIndex()], 1))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          //"[variables('blobStorageAccountPrivateEndpointId')]", **************************
          //"[variables('nicId')]"
          "myNic",
          "LinkedTemplate-appGw"
          //"[variables('nicId')]"
          //"[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[parameters('vmSize')]"
          },
          "osProfile": {
            "computerName": "[parameters('vmName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPasswordOrKey')]",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[parameters('imagePublisher')]",
              "offer": "[parameters('imageOffer')]",
              "sku": "[parameters('imageSku')]",
              "version": "latest"
            },
            "osDisk": {
              "name": "[format('{0}{1}{2}', parameters('vmName'), '_OSDisk', add(range(0, 2)[copyIndex()], 1))]",
              //"name": "[concat(parameters('vmName'),'_OSDisk')]",    //name is an optional if uncommented it will have conflict
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "diskSizeGB": "[parameters('osDiskSize')]",
              "managedDisk": {
                "storageAccountType": "[parameters('diskStorageAccounType')]"
              }
            },
            "copy": [
              {
                "name": "dataDisks",
                "count": "[parameters('numDataDisks')]",
                "input": {
                  "caching": "[parameters('dataDiskCaching')]",
                  "diskSizeGB": "[parameters('dataDiskSize')]",
                  "lun": "[copyIndex('dataDisks')]",
                  "name": "[concat(parameters('vmName'),'-DataDisk',copyIndex('dataDisks'))]",
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "[parameters('diskStorageAccounType')]"
                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                //"id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', variables('nicName'), add(range(0, 2)[copyIndex()], 1)))]"

              }
            ],            
            "networkInterfaceConfigurations": [
              {
              "name": "nintappgwbepool",
              "properties": {
                "ipConfigurations": [
                    {
                      "name": "string",
                      "properties": {
                          "applicationGatewayBackendAddressPools": [                                
                            {
                               //"id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGateWayName'),variables('appvideoPoolName'))]"
                               "id": "[reference('LinkedTemplate-appGw').outputs['appGwpublicIPid'].value]" 
                            } 
                                                           
                          ]
                          
                        }
                    }
                  ]
                }
              }
            ]
          }
          /*
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('blobStorageAccountId')).primaryEndpoints['blob']]"
            }
          }
          */
          
        }       

      },

      // Linked Template 1. blob  2. appGW
      {
        "type":"Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name":"LinkedTemplate-appGw",
        "properties": {
          "mode": "Incremental",
          "parameters": {
            "location": {
              "value":"[resourceGroup().location]"
            },
            "virtualNetworkName": {
              "value": "[parameters('virtualNetworkName')]"
            },

            "pathMatch1": {
              "value":"[parameters('pathMatchlk1')]"
            },
            "pathMatch2": {
              "value":"[parameters('pathMatchlk2')]"
            },
            "appgwname":{
              "value":"[parameters('appGatewayname')]"
            }
          },
          // "parametersLink": {
          //     "uri": "[concat(parameters('parameterUri-appGw'),'?',parameters('parameterSas-appGw'))]"
          //     //"contentVersion":"1.0.0.0"
          // }
          
          "templateLink": {
              "uri": "[concat(parameters('_artifactsLocation'),parameters('_artifactsLocationSasToken'))]"
              //"contentVersion":"1.0.0.0"   contentVersion property is not required for linked templates
          }
        }
        
      }
    ],
    "outputs": { 
      "appimagePoolName": {
          "type": "string",
          "value": "[reference('LinkedTemplate-appGw').outputs['appimagePoolName'].value]"
        },
      "appvideoPoolName": {
          "type": "string",
          "value": "[reference('LinkedTemplate-appGw').outputs['appvideoPoolName'].value]"
        },
      "appGwName": {
        "type": "string",
          "value": "[reference('LinkedTemplate-appGw').outputs['applicationGateWayName'].value]"
        },      
      "appGwpublicIPAddress": {
          "type": "string",
          "value": "[reference('LinkedTemplate-appGw').outputs['appGwpublicIPAddressName'].value]"
        },
      "appGwpublicIPid": {
          "type": "string",
          "value": "[reference('LinkedTemplate-appGw').outputs['appGwpublicIPid'].id]" 
        }
               
    }
  }

// https://github.com/Azure/azure-quickstart-templates/tree/master/quickstarts/microsoft.storage/blob-storage-private-endpoint
// Need to convert to linked template
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
     "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Specifies the location for all the resources."
        }
      },
      "virtualNetworkName": {
        "defaultValue": "atVnet",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the virtual network hosting the virtual machine."
        }
      },
      "virtualNetworkAddressPrefix": {
        "defaultValue": "10.100.0.0/16",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the virtual network hosting the virtual machine."
        }
      },
      "subnetName": {
        "defaultValue": "VmSubnet",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the subnet hosting the virtual machine."
        }
      },
      "subnetAddressPrefix": {
        "defaultValue": "10.100.0.0/24",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the subnet hosting the virtual machine."
        }
      },
      // Vmss Subnet
      "vmsssubnetName": {
        "defaultValue": "VmssSubnet",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the subnet hosting the virtual machine scale set."
        }
      },
      "vmsssubnetAddressPrefix": {
        "defaultValue": "10.100.1.0/24",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the subnet the virtual machine scale set."
        }
      },

      // Application Gateway
      "subnetAGWName": {
        "defaultValue": "GatewaySubnet",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the subnet for Application Gateway."
        }
      },
      "subnetAGWAddressPrefix": {
        "defaultValue": "10.100.2.0/24",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the subnet for Application Gateway."
        }
      },
      "pathMatch1": {
        "type": "string",
        "defaultValue": "/images/*",
        "metadata": {
          "description": "Path match string for Path Rule 1"
        }
      },
      "pathMatch2": {
        "defaultValue": "/others/*",
        "type": "string",
        "metadata": {
          "description": "Path match string for Path Rule 2"
        }
      },
      // AGW end

      "vmName": {
        "type": "string",
        "defaultValue": "webVm",
        "metadata": {
          "description": "Specifies the name of the virtual machine."
        }
      },
      "vmSize": {
        "type": "string",
        "defaultValue": "Standard_DS2_v2",
        "metadata": {
          "description": "Specifies the size of the virtual machine."
        }
      },
      "imagePublisher": {
        "type": "string",
        "defaultValue": "Canonical",
        "metadata": {
          "description": "Specifies the image publisher of the disk image used to create the virtual machine."
        }
      },
      "imageOffer": {
        "type": "string",
        "defaultValue": "UbuntuServer",
        "metadata": {
          "description": "Specifies the offer of the platform image or marketplace image used to create the virtual machine."
        }
      },
      "imageSku": {
        "type": "string",
        "defaultValue": "18.04-LTS",
        "metadata": {
          "description": "Specifies the Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
        }
      },
      "authenticationType": {
        "type": "string",
        "defaultValue": "password",
        "allowedValues": [
          "sshPublicKey",
          "password"
        ],
        "metadata": {
          "description": "Specifies the type of authentication when accessing the Virtual Machine. SSH key is recommended."
        }
      },
      "adminUsername": {
        "type": "string",
        "defaultValue": "azadmin",
        "metadata": {
          "description": "Specifies the name of the administrator account of the virtual machine."
        }
      },
      "adminPasswordOrKey": {
        "type": "securestring",
        "metadata": {
          "description": "Specifies the SSH Key or password for the virtual machine. SSH key is recommended."
        }
      },
      "diskStorageAccounType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_RAGRS",
          "Standard_ZRS",
          "Premium_LRS",
          "Premium_ZRS",
          "Standard_GZRS",
          "Standard_RAGZRS"
        ],
        "metadata": {
          "description": "Specifies the storage account type for OS and data disk."
        }
      },
      "numDataDisks": {
        "type": "int",
        "defaultValue": 0,
        "minValue": 0,
        "maxValue": 64,
        "metadata": {
          "description": "Specifies the number of data disks of the virtual machine."
        }
      },
      "osDiskSize": {
        "type": "int",
        "defaultValue": 30,
        "metadata": {
          "description": "Specifies the size in GB of the OS disk of the VM."
        }
      },
      "dataDiskSize": {
        "type": "int",
        "defaultValue": 30,
        "metadata": {
          "description": "Specifies the size in GB of the OS disk of the virtual machine."
        }
      },
      "dataDiskCaching": {
        "type": "string",
        "defaultValue": "ReadWrite",
        "metadata": {
          "description": "Specifies the caching requirements for the data disks."
        }
      },
      "blobStorageAccountName": {
        "type": "string",
        "defaultValue": "[concat('storage', uniquestring(resourceGroup().id))]",
        "metadata": {
          "description": "Specifies the globally unique name for the storage account used to store the images of the virtual machine."
        }
      },
      "blobStorageAccountPrivateEndpointName": {
        "type": "string",
        "defaultValue": "BlobPrivateEndpoint",
        "metadata": {
          "description": "Specifies the name of the private link to the boot diagnostics storage account."
        }
      },

      // VMSS add
      "windowsOSVersion": {
        "type": "string",
        "defaultValue": "2019-Datacenter",
        "allowedValues": [
          "2012-Datacenter",
          "2012-R2-Datacenter",
          "2019-Datacenter"
        ],
        "metadata": {
          "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2012-Datacenter, 2012-R2-Datacenter., 2019-Datacenter."
        }
      },
      "vmSku": {
        "type": "string",
        "defaultValue": "Standard_A1_v2",
        "metadata": {
          "description": "Size of VMs in the VM Scale Set."
        }
      },
      "instanceCount": {
        "type": "int",
        "metadata": {
          "description": "Number of VM instances (5 or less). But note that it can be set up to 1000"
        },
        "minValue": 3,
        "maxValue": 5 
      },
      "vmssName": {
        "type": "string",
        "metadata": {
          "description": "String used as a base for naming resources. Must be 3-57 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
        },
        "maxLength": 57
      }
    // Parameter End
    },
    "variables": {
      "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
      "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
      "vmsssubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('vmsssubnetName'))]",

      "nsgName": "[concat(parameters('subnetName'), '-nsg')]",
      "vmssnsgName": "[concat(parameters('vmsssubnetName'), '-nsg')]",
      "nsgId": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
      "vmssnsgId": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('vmssnsgName'))]",
      "publicIPAddressName": "[concat(parameters('vmName'), '-publicIP')]",
      "publicIPAddressType": "Dynamic",
      "publicIpId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",

      "nicName": "[concat(parameters('vmName'), '-nic')]",
      "nicId": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
      "ipconfig_name": "ipconfig",
      //"vmId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
      //    "customScriptId": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'CustomScript')]",
      //"omsAgentForLinuxId": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'LogAnalytics')]",
      //    "scriptFileUri": "[uri(parameters('_artifactsLocation'), concat('scripts/', parameters('scriptFileName'), parameters('_artifactsLocationSasToken')))]",
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
              "keyData": "[parameters('adminPasswordOrKey')]"
            }
          ]
        },
        "provisionVMAgent": true
      },
      // Storage Account Blob
      "blobStorageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('blobStorageAccountName'))]",
      "blobPublicDNSZoneForwarder": "[concat('.blob.', environment().suffixes.storage)]",
      "blobPrivateDnsZoneName": "[concat('privatelink', variables('blobPublicDNSZoneForwarder'))]",
      "blobPrivateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('blobPrivateDnsZoneName'))]",
      //      "blobServicePrimaryEndpoint": "[concat(parameters('blobStorageAccountName'), variables('blobPublicDNSZoneForwarder'))]",
      "blobStorageAccountPrivateEndpointId": "[resourceId('Microsoft.Network/privateEndpoints', parameters('blobStorageAccountPrivateEndpointName'))]",
      "blobStorageAccountPrivateEndpointGroupName": "blob",  // "table" or "queue" or "File Share"
      "GrpBlobPrivateDnsZone": "[concat(parameters('blobStorageAccountPrivateEndpointName'),'/', variables('blobStorageAccountPrivateEndpointGroupName'), 'PrivateDnsZoneGroup')]",

      // ----------------AppGateway--------------
      //"nsgAGWName": "[concat(parameters('subnetAGWName'), 'NSG')]",  // App GW
      "appGwpublicIPAddressName": "appGwpubIPname",
      "publicIPAddressTypeAGW": "Dynamic",  // changed from static
      //"nsgAGWId": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgAGWName'))]",
      //"subnetAGWId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetAGWName'))]", 
      "applicationGateWayName": "AppGateway",
      
      // VMSS added
      "namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
      
      "nicNamevmss": "[concat(variables('namingInfix'), '-nic')]",
      "ipConfigName": "[concat(variables('namingInfix'), '-ipconfig')]",
      "appGwBePoolName": "[concat(variables('namingInfix'), '-appGwBePool')]",
      "appimagePoolName": "[concat(variables('namingInfix'), '-imageBePool')]",
      "appvideoPoolName": "[concat(variables('namingInfix'), '-videoBePool')]",
      "urlpathMapName": "[concat(variables('namingInfix'), '-urlpathmap')]",

      "imageReference": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "[parameters('windowsOSVersion')]",
        "version": "latest"
      },
      "vmssDnsName": "vmssdns" //Used for testing to open public ips for vmss

    // Variable End
    },
    "resources": [
      //****************************************************************************************
      // Virtul Networks and Subnets
      {
        "apiVersion": "2019-11-01",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[parameters('virtualNetworkName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[variables('nsgId')]",
          "[variables('vmssnsgId')]"
        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[parameters('virtualNetworkAddressPrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[parameters('subnetName')]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefix')]",
                "networkSecurityGroup": {
                  "id": "[variables('nsgId')]"
                },
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              }
            },            
            {
              "name": "[parameters('vmsssubnetName')]",
              "properties": {
                "addressPrefix": "[parameters('vmsssubnetAddressPrefix')]",
                "networkSecurityGroup": {
                  "id": "[variables('vmssnsgId')]"
                },
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              }
            },
            // AppGateway 
            {  // use it
              "name": "[parameters('subnetAGWName')]",
              "properties": {
                "addressPrefix": "[parameters('subnetAGWAddressPrefix')]",
                /*
                "networkSecurityGroup": {
                  "id": "[variables('nsgAGWId')]"  // may need to add appGw NSG
                },
                */                
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"

              }
            }
            // AppGateway end 
          ],
          "enableDdosProtection": false, // AppGateway 
          "enableVmProtection": false // AppGateway end         

        }
      },
      /*
      {
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('publicIPAddressName')]",
        "location": "[parameters('location')]",
        "properties": {
          "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
          "dnsSettings": {
             "domainNameLabel": "[concat(toLower(parameters('vmName')), uniquestring(resourceGroup().id))]"
          }
        }
      },
      */
      
      {
        "copy": {
          "name": "publicIPAddress",
          "count": "[length(range(0, 3))]"
        },
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2021-08-01",
        "name": "[format('{0}{1}', variables('publicIPAddressName'), range(0, 3)[copyIndex()])]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Dynamic",
          "idleTimeoutInMinutes": 4
        }
      },
      // Network Security Groups 
      {
        "apiVersion": "2019-08-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('nsgName')]",
        "location": "[parameters('location')]",
        "properties": {
          "securityRules": [
            {
              "name": "AllowSSHInbound",
              "properties": {
                "priority": 100,
                "access": "Allow",
                "direction": "Inbound",
                "destinationPortRange": "22",
                "protocol": "Tcp",
                "sourceAddressPrefix": "*",
                "sourcePortRange": "*",
                "destinationAddressPrefix": "*"
              }
            }
          ]
        }
      },



      // VM network Interfaces
      {
        "copy": {
          "name": "myNic",
          "count": "[length(range(0, 2))]"
        },
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/networkInterfaces",
        //"name": "[variables('nicName')]",
        "name": "[format('{0}{1}', variables('nicName'), add(range(0, 2)[copyIndex()], 1))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          //"[variables('publicIpId')]",
          "[variables('vnetId')]",
          "[variables('nsgId')]",
          "publicIPAddress"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "[format('{0}{1}', variables('ipconfig_name'), add(range(0, 2)[copyIndex()], 1))]",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  //"id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', variables('publicIPAddressName'), add(range(0, 2)[copyIndex()], 1)))]"                
                  //"id": "[variables('publicIpId')]"
                },
                "subnet": {
                  "id": "[variables('subnetId')]"
                }
              }
            }
          ]
        }
      },


      // Virtual Machines
      {
        "copy": {
          "name": "VMbk",
          "count": "[length(range(0, 2))]"
        },        
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/virtualMachines",
        //"name": "[parameters('vmName')]",
        "name": "[format('{0}{1}', parameters('vmName'), add(range(0, 2)[copyIndex()], 1))]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[variables('blobStorageAccountPrivateEndpointId')]",
          //"[variables('nicId')]"
          "myNic"
          //"[variables('nicId')]"
          //"[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[parameters('vmSize')]"
          },
          "osProfile": {
            "computerName": "[parameters('vmName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPasswordOrKey')]",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[parameters('imagePublisher')]",
              "offer": "[parameters('imageOffer')]",
              "sku": "[parameters('imageSku')]",
              "version": "latest"
            },
            "osDisk": {
              "name": "[concat(parameters('vmName'),'_OSDisk')]",
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "diskSizeGB": "[parameters('osDiskSize')]",
              "managedDisk": {
                "storageAccountType": "[parameters('diskStorageAccounType')]"
              }
            },
            "copy": [
              {
                "name": "dataDisks",
                "count": "[parameters('numDataDisks')]",
                "input": {
                  "caching": "[parameters('dataDiskCaching')]",
                  "diskSizeGB": "[parameters('dataDiskSize')]",
                  "lun": "[copyIndex('dataDisks')]",
                  "name": "[concat(parameters('vmName'),'-DataDisk',copyIndex('dataDisks'))]",
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "[parameters('diskStorageAccounType')]"
                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                //"id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', variables('nicName'), add(range(0, 2)[copyIndex()], 1)))]"

              }
            ],
            "networkInterfaceConfigurations": [
              {
              "name": "nintappgwbepool",
              "properties": {
                "ipConfigurations": [
                    {
                      "name": "string",
                      "properties": {
                          "applicationGatewayBackendAddressPools": [                                
                            {
                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGateWayName'),variables('appvideoPoolName'))]"
                            }                                
                          ]
                        }
                    }
                  ]
                }
              }
            ]
            
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('blobStorageAccountId')).primaryEndpoints['blob']]"
            }
          }
        }
      },

      //****************************************************************************************


      //  --------DNS and Blob Storage Account with Private Endpoint-------------//      
      // Private DNS Zones    
      {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2018-09-01",
        "name": "[variables('blobPrivateDnsZoneName')]",
        "location": "global",
        "properties": {
          "maxNumberOfRecordSets": 25000,
          "maxNumberOfVirtualNetworkLinks": 1000,
          "maxNumberOfVirtualNetworkLinksWithRegistration": 100
        }
      },
      // Private DNS Zones - Virtual Network Links
      {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2018-09-01",
        "name": "[concat(variables('blobPrivateDnsZoneName'), '/link_to_', toLower(parameters('virtualNetworkName')))]",
        "location": "global",
        "dependsOn": [
          "[variables('blobPrivateDnsZoneId')]",
          "[variables('vnetId')]"
        ],
        "properties": {
          "registrationEnabled": false,
          "virtualNetwork": {
            "id": "[variables('vnetId')]"
          }
        }
      },
      // Private DNS Zone Groups
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2020-03-01",
        "name": "[variables('GrpBlobPrivateDnsZone')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[variables('blobPrivateDnsZoneId')]",
          "[variables('blobStorageAccountPrivateEndpointId')]"
        ],
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "dnsConfig",
              "properties": {
                "privateDnsZoneId": "[variables('blobPrivateDnsZoneId')]"
              }
            }
          ]
        }
      },
      // Blob Storage Accounts
      {
        "apiVersion": "2019-06-01",
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[parameters('blobStorageAccountName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "StorageV2"
      },
      // Blob Storage Account Private Endpoint
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2020-04-01",
        "name": "[parameters('blobStorageAccountPrivateEndpointName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[variables('vnetId')]",
          "[variables('blobStorageAccountId')]"
        ],
        "properties": {
          "privateLinkServiceConnections": [
            {
              "name": "[parameters('blobStorageAccountPrivateEndpointName')]",
              "properties": {
                "privateLinkServiceId": "[variables('blobStorageAccountId')]",
                "groupIds": [
                  "[variables('blobStorageAccountPrivateEndpointGroupName')]"
                ]
              }
            }
          ],
          "subnet": {
            "id": "[variables('subnetId')]"
          },
          "customDnsConfigs": [
            {
              "fqdn": "[concat(parameters('blobStorageAccountName'), variables('blobPublicDNSZoneForwarder'))]"
            }
          ]
        }
      },
      //****************************************************************************************
      //  --------------  Application Gateway ------------------//      
      // Application Gateway public IP Addresses
      {
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('appGwpublicIPAddressName')]",
        "location": "[parameters('location')]",
        "properties": {
          "publicIPAllocationMethod": "[variables('publicIPAddressTypeAGW')]"
        }
      },
      // Application Gateway
      {
        "type": "Microsoft.Network/applicationGateways",
        "apiVersion": "2021-05-01",
        "name": "[variables('applicationGateWayName')]",
        "location": "[parameters('location')]",
        "dependsOn":[
          "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGwpublicIPAddressName'))]",
          "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
          //"[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetAGWName'))]"
          // "[variables('subnetAGWId')]"
        ],

        "properties": {
          "sku": {
            "name": "Standard_Small",
            "tier": "Standard",
            "capacity": 1
          },
          "gatewayIPConfigurations": [
            {
              "name": "appGatewayIpConfig",
              "properties": {
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetAGWName'))]"
                }
              }
            }
          ],
          "frontendIPConfigurations": [
            {
              "name": "appGwPublicFrontendIp",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGwpublicIPAddressName'))]"
                }
              }
            }
          ],
          "frontendPorts": [
            {
              "name": "port_80",
              "properties": {
                "port": 80
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[variables('appimagePoolName')]", // added from VMSS
              "properties": {}
            },
            {
              "name": "[variables('appvideoPoolName')]", // added from VMSS
              "properties": {}
            },
            {
              "name": "[variables('appGwBePoolName')]",  // updated from VMSS
              "properties": {}
            }
          ],
          "backendHttpSettingsCollection": [
            {
              "name": "myHTTPSetting",
              "properties": {
                "port": 80,
                "protocol": "Http",
                "cookieBasedAffinity": "Disabled",
                "pickHostNameFromBackendAddress": false,
                "requestTimeout": 20
              }
            }
          ],
          "httpListeners": [
            {
              "name": "myListener",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('applicationGateWayName'), 'appGwPublicFrontendIp')]"
                },
                "frontendPort": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('applicationGateWayName'), 'port_80')]"
                },
                "protocol": "Http",
                "requireServerNameIndication": false
              }
            }
          ],
          /*
          "requestRoutingRules": [
            {
              "name": "myRoutingRule",
              "properties": {
                "ruleType": "Basic",
                "httpListener": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('applicationGateWayName'), 'myListener')]"
                },
                "backendAddressPool": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGateWayName'), 'myBackendPool')]"
                },
                "backendHttpSettings": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('applicationGateWayName'), 'myHTTPSetting')]"
                }
              }
            }
          ],          */
          //88888888888888888888888888888888
          "urlPathMaps": [{
              "name": "[variables('urlpathMapName')]",
              //"id": "/subscriptions/{subscriptionId}/../microsoft.network/applicationGateways/{gatewayName}/urlPathMaps/{urlpathMapName}",
              "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps', variables('applicationGateWayName'), variables('urlpathMapName'))]",
              "properties": {
                  "defaultBackendAddressPool": {
                      //"id": "/subscriptions/    {subscriptionId}/../microsoft.network/applicationGateways/{gatewayName}/backendAddressPools/{poolName1}"
                      "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGateWayName'), variables('appGwBePoolName'))]"
                  },
                  "defaultBackendHttpSettings": {
                      //"id": "/subscriptions/{subscriptionId}/../microsoft.network/applicationGateways/{gatewayName}/backendHttpSettingsCollection/{settingname1}"
                      "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('applicationGateWayName'), 'myHTTPSetting')]"
                  },
                  "pathRules": [
                    {
                      "name": "pathRule1",
                      "properties": {
                          "paths": [
                              "[parameters('pathMatch1')]"
                          ],
                          "backendAddressPool": {
                              //"id": "/subscriptions/{subscriptionId}/../microsoft.network/applicationGateways/{gatewayName}/backendAddressPools/{poolName1}"
                               "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGateWayName'),variables('appimagePoolName'))]"
                          },
                          "backendHttpsettings": {
                              //"id": "/subscriptions/{subscriptionId}/../microsoft.network/applicationGateways/{gatewayName}/backendHttpSettingsCollection/{settingName1}"
                               "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('applicationGateWayName'), 'myHTTPSetting')]"
                          }
                      }
                    },
                    {
                      "name": "pathRule2",
                      "properties": {
                          "paths": [
                              "[parameters('pathMatch2')]"
                          ],
                          "backendAddressPool": {
                              //"id": "/subscriptions/{subscriptionId}/../microsoft.network/applicationGateways/{gatewayName}/backendAddressPools/{poolName2}"
                               "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGateWayName'), variables('appvideoPoolName'))]"
                          },
                          "backendHttpsettings": {
                              //"id": "/subscriptions/{subscriptionId}/../microsoft.network/applicationGateways/{gatewayName}/backendHttpSettingsCollection/{settingName2}"
                               "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('applicationGateWayName'), 'myHTTPSetting')]"

                          }
                      }
                    }
                  ]
              }
            }
          ],
          "requestRoutingRules": [
            {
              "name": "ruleName",
              //"id": "/subscriptions/{subscriptionId}/../microsoft.network/applicationGateways/{gatewayName}/requestRoutingRules/ruleName",
              "id": "[resourceId('Microsoft.Network/applicationGateways/requestRoutingRules', variables('applicationGateWayName'), 'ruleName')]",

              "properties": {
                  "ruleType": "PathBasedRouting",
                  "httpListener": {
                      //"id": "/subscriptions/{subscriptionId}/../microsoft.network/applicationGateways/{gatewayName}/httpListeners/<listenerName>"
                      "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('applicationGateWayName'), 'myListener')]"
                  },
                  "urlPathMap": {
                      //"id": "/subscriptions/{subscriptionId}/../microsoft.network/applicationGateways/{gatewayName}/urlPathMaps/{urlpathMapName}"
                      "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps', variables('applicationGateWayName'), variables('urlpathMapName'))]"
                  }

              }
            }
          ],
          //88888888888888888888888888888888
          "enableHttp2": false
          /*
          "autoscaleConfiguration": {
            "minCapacity": 1,
            "maxCapacity": 2
          }
          */
        }
      },
      
      //****************************************************************************************

      //  --------------  VM Scale Set ------------------//     
      // VMSS Network Security Groups 
      {
        "apiVersion": "2019-08-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('vmssnsgName')]",
        "location": "[parameters('location')]",
        "properties": {
          "securityRules": [
            {
              "name": "AllowAnyRDPInbound",
              "properties": {
                "priority": 110,
                "access": "Allow",
                "direction": "Inbound",
                "destinationPortRange": "3389",
                "protocol": "Tcp",
                "sourceAddressPrefix": "*",
                "sourcePortRange": "*",
                "destinationAddressPrefix": "*"
              }
            }
          ]
        }
      },
      // VMSS added
      {
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "name": "[variables('namingInfix')]",
        "location": "[parameters('location')]",
        "apiVersion": "2016-04-30-preview",
        "dependsOn": [
          "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
          "[resourceId('Microsoft.Network/applicationGateways/', variables('applicationGateWayName'))]"
        ],
        "sku": {
          "name": "[parameters('vmSku')]",
          "tier": "Standard",
          "capacity": "[parameters('instanceCount')]"
        },
        "properties": {
          "overprovision": "true",
          "singlePlacementGroup": "false",
          "upgradePolicy": {
            "mode": "Automatic"
          },
          "virtualMachineProfile": {
            "storageProfile": {
              "osDisk": {
                "caching": "ReadWrite",
                "createOption": "FromImage"
              },
              "imageReference": "[variables('imageReference')]"
            },
            "osProfile": {
              "computerNamePrefix": "[variables('namingInfix')]",
              "adminUsername": "[parameters('adminUsername')]",
              "adminPassword": "[parameters('adminPasswordOrKey')]"
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "[variables('nicNamevmss')]",
                  "properties": {
                    "primary": true,
                    "ipConfigurations": [
                      {
                        "name": "[variables('ipConfigName')]",
                        "properties": {
                          "subnet": {                            
                            //"id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('vmsssubnetName'))]"
                            "id": "[variables('vmsssubnetId')]"
                          },
                          "ApplicationGatewayBackendAddressPools": [
                            {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools/', variables('applicationGateWayName'), variables('appGwBePoolName'))]"  
                            },
                            {
                              "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGateWayName'),variables('appimagePoolName'))]"
                            },
                            {
                             // "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGateWayName'),variables('appvideoPoolName'))]"
                            }
                          ],
                          // added temporarly for testing VMSS 
                          "publicIPAddressconfiguration": {
                              "name": "publicip",
                              "properties": {
                              "idleTimeoutInMinutes": 10,
                              "dnsSettings": {
                                  "domainNameLabel": "[variables('vmssDnsName')]"
                                }
                              }
                          }
                        }
                      }
                    ],
                    "networkSecurityGroup": {
                      "id": "[variables('vmssnsgId')]"
                    }
                  }
                }
              ]
            }
          }
        }
      }
      // VMSS Network Interfaces
      /*
      {
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[variables('nicNamevmss')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[variables('publicIpId')]",
          "[variables('vnetId')]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                },
                "subnet": {
                  "id": "[variables('vmsssubnetId')]"
                }
              }
            }
          ]
        }
      }
      */  
      // VMSS end
    // resource end
    ],
    "outputs": {
      "blobStorageAccountPrivateEndpoint": {
        "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('blobStorageAccountPrivateEndpointName')), '2020-04-01', 'Full')]",
        "type": "object"
      },
      "blobStorageAccount": {
        "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('blobStorageAccountName')), '2019-06-01', 'Full')]",
        "type": "object"
      },
      "adminUsername": {
        "value": "[parameters('adminUsername')]",
        "type": "string"
      },
      /*
      "scriptFileUri": {
        "value": "[variables('scriptFileUri')]",
        "type": "string"
      },
      */
      "environment": {
        "value": "[environment()]",
        "type": "object"
      }
    }

}